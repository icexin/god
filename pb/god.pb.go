// Code generated by protoc-gen-go.
// source: god.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	god.proto

It has these top-level messages:
	JobDesc
	RunJobRequest
	RunJobResponse
	SubmitJobRequest
	SubmitJobResponse
	StopJobRequest
	StopJobResponse
	ShowJobRequest
	ShowJobResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JobDesc struct {
	Cmd        string   `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	Concurrent int32    `protobuf:"varint,2,opt,name=concurrent" json:"concurrent,omitempty"`
	Interval   int32    `protobuf:"varint,3,opt,name=interval" json:"interval,omitempty"`
	Agent      []string `protobuf:"bytes,4,rep,name=agent" json:"agent,omitempty"`
}

func (m *JobDesc) Reset()                    { *m = JobDesc{} }
func (m *JobDesc) String() string            { return proto.CompactTextString(m) }
func (*JobDesc) ProtoMessage()               {}
func (*JobDesc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RunJobRequest struct {
	Id   int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Desc *JobDesc `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *RunJobRequest) Reset()                    { *m = RunJobRequest{} }
func (m *RunJobRequest) String() string            { return proto.CompactTextString(m) }
func (*RunJobRequest) ProtoMessage()               {}
func (*RunJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RunJobRequest) GetDesc() *JobDesc {
	if m != nil {
		return m.Desc
	}
	return nil
}

type RunJobResponse struct {
	Code   int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Body   string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Stoped bool   `protobuf:"varint,3,opt,name=stoped" json:"stoped,omitempty"`
}

func (m *RunJobResponse) Reset()                    { *m = RunJobResponse{} }
func (m *RunJobResponse) String() string            { return proto.CompactTextString(m) }
func (*RunJobResponse) ProtoMessage()               {}
func (*RunJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SubmitJobRequest struct {
	Desc *JobDesc `protobuf:"bytes,1,opt,name=desc" json:"desc,omitempty"`
}

func (m *SubmitJobRequest) Reset()                    { *m = SubmitJobRequest{} }
func (m *SubmitJobRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitJobRequest) ProtoMessage()               {}
func (*SubmitJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubmitJobRequest) GetDesc() *JobDesc {
	if m != nil {
		return m.Desc
	}
	return nil
}

type SubmitJobResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SubmitJobResponse) Reset()                    { *m = SubmitJobResponse{} }
func (m *SubmitJobResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitJobResponse) ProtoMessage()               {}
func (*SubmitJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StopJobRequest struct {
}

func (m *StopJobRequest) Reset()                    { *m = StopJobRequest{} }
func (m *StopJobRequest) String() string            { return proto.CompactTextString(m) }
func (*StopJobRequest) ProtoMessage()               {}
func (*StopJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type StopJobResponse struct {
}

func (m *StopJobResponse) Reset()                    { *m = StopJobResponse{} }
func (m *StopJobResponse) String() string            { return proto.CompactTextString(m) }
func (*StopJobResponse) ProtoMessage()               {}
func (*StopJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ShowJobRequest struct {
}

func (m *ShowJobRequest) Reset()                    { *m = ShowJobRequest{} }
func (m *ShowJobRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowJobRequest) ProtoMessage()               {}
func (*ShowJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ShowJobResponse struct {
}

func (m *ShowJobResponse) Reset()                    { *m = ShowJobResponse{} }
func (m *ShowJobResponse) String() string            { return proto.CompactTextString(m) }
func (*ShowJobResponse) ProtoMessage()               {}
func (*ShowJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*JobDesc)(nil), "JobDesc")
	proto.RegisterType((*RunJobRequest)(nil), "RunJobRequest")
	proto.RegisterType((*RunJobResponse)(nil), "RunJobResponse")
	proto.RegisterType((*SubmitJobRequest)(nil), "SubmitJobRequest")
	proto.RegisterType((*SubmitJobResponse)(nil), "SubmitJobResponse")
	proto.RegisterType((*StopJobRequest)(nil), "StopJobRequest")
	proto.RegisterType((*StopJobResponse)(nil), "StopJobResponse")
	proto.RegisterType((*ShowJobRequest)(nil), "ShowJobRequest")
	proto.RegisterType((*ShowJobResponse)(nil), "ShowJobResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for GodAgent service

type GodAgentClient interface {
	RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (GodAgent_RunJobClient, error)
}

type godAgentClient struct {
	cc *grpc.ClientConn
}

func NewGodAgentClient(cc *grpc.ClientConn) GodAgentClient {
	return &godAgentClient{cc}
}

func (c *godAgentClient) RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (GodAgent_RunJobClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GodAgent_serviceDesc.Streams[0], c.cc, "/GodAgent/RunJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &godAgentRunJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GodAgent_RunJobClient interface {
	Recv() (*RunJobResponse, error)
	grpc.ClientStream
}

type godAgentRunJobClient struct {
	grpc.ClientStream
}

func (x *godAgentRunJobClient) Recv() (*RunJobResponse, error) {
	m := new(RunJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GodAgent service

type GodAgentServer interface {
	RunJob(*RunJobRequest, GodAgent_RunJobServer) error
}

func RegisterGodAgentServer(s *grpc.Server, srv GodAgentServer) {
	s.RegisterService(&_GodAgent_serviceDesc, srv)
}

func _GodAgent_RunJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GodAgentServer).RunJob(m, &godAgentRunJobServer{stream})
}

type GodAgent_RunJobServer interface {
	Send(*RunJobResponse) error
	grpc.ServerStream
}

type godAgentRunJobServer struct {
	grpc.ServerStream
}

func (x *godAgentRunJobServer) Send(m *RunJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GodAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GodAgent",
	HandlerType: (*GodAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunJob",
			Handler:       _GodAgent_RunJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for GodMaster service

type GodMasterClient interface {
	SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error)
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error)
	ShowJob(ctx context.Context, in *ShowJobRequest, opts ...grpc.CallOption) (*ShowJobResponse, error)
}

type godMasterClient struct {
	cc *grpc.ClientConn
}

func NewGodMasterClient(cc *grpc.ClientConn) GodMasterClient {
	return &godMasterClient{cc}
}

func (c *godMasterClient) SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error) {
	out := new(SubmitJobResponse)
	err := grpc.Invoke(ctx, "/GodMaster/SubmitJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *godMasterClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error) {
	out := new(StopJobResponse)
	err := grpc.Invoke(ctx, "/GodMaster/StopJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *godMasterClient) ShowJob(ctx context.Context, in *ShowJobRequest, opts ...grpc.CallOption) (*ShowJobResponse, error) {
	out := new(ShowJobResponse)
	err := grpc.Invoke(ctx, "/GodMaster/ShowJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GodMaster service

type GodMasterServer interface {
	SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error)
	StopJob(context.Context, *StopJobRequest) (*StopJobResponse, error)
	ShowJob(context.Context, *ShowJobRequest) (*ShowJobResponse, error)
}

func RegisterGodMasterServer(s *grpc.Server, srv GodMasterServer) {
	s.RegisterService(&_GodMaster_serviceDesc, srv)
}

func _GodMaster_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodMasterServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GodMaster/SubmitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodMasterServer).SubmitJob(ctx, req.(*SubmitJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GodMaster_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodMasterServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GodMaster/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodMasterServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GodMaster_ShowJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodMasterServer).ShowJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GodMaster/ShowJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodMasterServer).ShowJob(ctx, req.(*ShowJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GodMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GodMaster",
	HandlerType: (*GodMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJob",
			Handler:    _GodMaster_SubmitJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _GodMaster_StopJob_Handler,
		},
		{
			MethodName: "ShowJob",
			Handler:    _GodMaster_ShowJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("god.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xc9, 0x9f, 0xb6, 0xc9, 0xbc, 0xbc, 0x69, 0x3a, 0x88, 0x94, 0x20, 0x52, 0xe2, 0xa5,
	0xa0, 0x2c, 0x25, 0x1e, 0x3c, 0x79, 0x50, 0x84, 0x42, 0x41, 0x90, 0xed, 0xcd, 0x5b, 0x93, 0x5d,
	0x6a, 0xc0, 0x66, 0x62, 0xb2, 0x51, 0xfc, 0x2c, 0x7e, 0x59, 0xc9, 0x26, 0xad, 0x4d, 0xf4, 0x36,
	0xf3, 0xe4, 0x99, 0xd9, 0xdf, 0x33, 0x04, 0xdc, 0x2d, 0x09, 0x96, 0x17, 0xa4, 0x28, 0xdc, 0xc1,
	0x68, 0x45, 0xf1, 0x83, 0x2c, 0x13, 0xf4, 0xc1, 0x4a, 0x76, 0x62, 0x6a, 0xcc, 0x8c, 0xb9, 0xcb,
	0xeb, 0x12, 0xcf, 0x01, 0x12, 0xca, 0x92, 0xaa, 0x28, 0x64, 0xa6, 0xa6, 0xe6, 0xcc, 0x98, 0x0f,
	0xf8, 0x91, 0x82, 0x01, 0x38, 0x69, 0xa6, 0x64, 0xf1, 0xbe, 0x79, 0x9d, 0x5a, 0xfa, 0xeb, 0xa1,
	0xc7, 0x13, 0x18, 0x6c, 0xb6, 0xf5, 0x98, 0x3d, 0xb3, 0xe6, 0x2e, 0x6f, 0x9a, 0xf0, 0x16, 0xfe,
	0xf3, 0x2a, 0x5b, 0x51, 0xcc, 0xe5, 0x5b, 0x25, 0x4b, 0x85, 0x1e, 0x98, 0x69, 0xf3, 0xa6, 0xc5,
	0xcd, 0x54, 0xe0, 0x19, 0xd8, 0x42, 0x96, 0x89, 0x7e, 0xec, 0x5f, 0xe4, 0xb0, 0x16, 0x8e, 0x6b,
	0x35, 0x7c, 0x02, 0x6f, 0x3f, 0x5e, 0xe6, 0x94, 0x95, 0x12, 0x11, 0xec, 0x84, 0x84, 0xd4, 0x1b,
	0x06, 0x5c, 0xd7, 0xb5, 0x16, 0x93, 0xf8, 0xd4, 0x3b, 0x5c, 0xae, 0x6b, 0x3c, 0x85, 0x61, 0xa9,
	0x28, 0x97, 0x42, 0x83, 0x3a, 0xbc, 0xed, 0xc2, 0x05, 0xf8, 0xeb, 0x2a, 0xde, 0xa5, 0xea, 0x88,
	0x69, 0xcf, 0x60, 0xfc, 0xc9, 0x70, 0x01, 0x93, 0xa3, 0x89, 0x16, 0xa3, 0x17, 0x23, 0xf4, 0xc1,
	0x5b, 0x2b, 0xca, 0x7f, 0x96, 0x86, 0x13, 0x18, 0x1f, 0x94, 0x66, 0x48, 0x9b, 0x5e, 0xe8, 0xa3,
	0x67, 0xda, 0x2b, 0x8d, 0x29, 0xba, 0x01, 0x67, 0x49, 0xe2, 0xae, 0xbe, 0x1e, 0x5e, 0xc2, 0xb0,
	0x89, 0x8f, 0x1e, 0xeb, 0x9c, 0x31, 0x18, 0xb3, 0xee, 0x5d, 0x16, 0x46, 0xf4, 0x65, 0x80, 0xbb,
	0x24, 0xf1, 0xb8, 0x29, 0x95, 0x2c, 0x30, 0x02, 0xf7, 0x40, 0x8d, 0x13, 0xd6, 0xcf, 0x1c, 0x20,
	0xfb, 0x1d, 0xea, 0x0a, 0x46, 0x2d, 0x32, 0x8e, 0x59, 0x37, 0x4e, 0xe0, 0xb3, 0x5e, 0x1a, 0xed,
	0x6e, 0xd8, 0x6b, 0x77, 0x27, 0x57, 0xed, 0xee, 0xc6, 0xba, 0xb7, 0x9f, 0xcd, 0x3c, 0x8e, 0x87,
	0xfa, 0x27, 0xbc, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x11, 0x33, 0x2f, 0x3e, 0x91, 0x02, 0x00,
	0x00,
}
